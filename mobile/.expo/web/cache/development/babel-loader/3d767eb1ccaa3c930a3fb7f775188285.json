{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport React from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport Image from \"react-native-web/dist/exports/Image\";\n\nvar gilda = require(\"../assets/images/gilda.png\");\n\nvar klaus = require(\"../assets/images/klaus.png\");\n\nvar auron = require(\"../assets/images/auron.png\");\n\nvar lexa = require(\"../assets/images/lexa.png\");\n\nvar steven = require(\"../assets/images/steven.png\");\n\nvar Board = function Board() {\n  return React.createElement(ScrollView, {\n    style: styles.scrollContainerVertical\n  }, React.createElement(View, {\n    style: styles.container\n  }, React.createElement(View, {\n    style: styles.element\n  }, React.createElement(Image, {\n    source: gilda,\n    style: styles.token\n  })), React.createElement(View, {\n    style: styles.element\n  }, React.createElement(Image, {\n    source: klaus,\n    style: styles.token\n  })), _toConsumableArray(Array(9)).map(function (element) {\n    return React.createElement(View, {\n      style: styles.element,\n      key: element\n    });\n  }), React.createElement(View, {\n    style: styles.element\n  }, React.createElement(Image, {\n    source: auron,\n    style: styles.token\n  })), _toConsumableArray(Array(1)).map(function (element) {\n    return React.createElement(View, {\n      style: styles.element,\n      key: element\n    });\n  }), React.createElement(View, {\n    style: styles.element\n  }, React.createElement(Image, {\n    source: lexa,\n    style: styles.token\n  })), _toConsumableArray(Array(3)).map(function (element) {\n    return React.createElement(View, {\n      style: styles.element,\n      key: element\n    });\n  }), React.createElement(View, {\n    style: styles.element\n  }, React.createElement(Image, {\n    source: steven,\n    style: styles.token\n  })), _toConsumableArray(Array(52)).map(function (element) {\n    return React.createElement(View, {\n      style: styles.element,\n      key: element\n    });\n  })));\n};\n\nvar styles = StyleSheet.create({\n  scrollContainerVertical: {\n    marginTop: 40,\n    flex: 1,\n    height: 1000\n  },\n  container: {\n    flex: 1,\n    flexDirection: \"row\",\n    flexWrap: \"wrap\"\n  },\n  element: {\n    width: Dimensions.get(\"window\").width / 5,\n    borderWidth: 1,\n    borderColor: \"black\",\n    borderStyle: \"dotted\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    height: 75,\n    backgroundColor: \"transparent\"\n  },\n  token: {\n    resizeMode: \"contain\",\n    width: 75,\n    height: 75\n  }\n});\nexport default Board;","map":{"version":3,"sources":["C:/Users/rusty/Documents/Coding/Fullstack Academy/Senior-Phase/Mobile-VTT/mobile/components/Board.js"],"names":["React","gilda","require","klaus","auron","lexa","steven","Board","styles","scrollContainerVertical","container","element","token","Array","map","StyleSheet","create","marginTop","flex","height","flexDirection","flexWrap","width","Dimensions","get","borderWidth","borderColor","borderStyle","justifyContent","alignItems","backgroundColor","resizeMode"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { View, StyleSheet, ScrollView, Dimensions, Image } from \"react-native\";\r\n\r\n//Here I'm importing the image files from the assets folder.\r\nconst gilda = require(\"../assets/images/gilda.png\");\r\nconst klaus = require(\"../assets/images/klaus.png\");\r\nconst auron = require(\"../assets/images/auron.png\");\r\nconst lexa = require(\"../assets/images/lexa.png\");\r\nconst steven = require(\"../assets/images/steven.png\");\r\n\r\n//This is REALLY hardcoded right now, but I'm going to find a solution!\r\nconst Board = () => {\r\n  return (\r\n    <ScrollView style={styles.scrollContainerVertical}>\r\n      <View style={styles.container}>\r\n        <View style={styles.element}>\r\n          <Image source={gilda} style={styles.token} />\r\n        </View>\r\n        <View style={styles.element}>\r\n          <Image source={klaus} style={styles.token} />\r\n        </View>\r\n        {[...Array(9)].map((element) => (\r\n          <View style={styles.element} key={element}></View>\r\n        ))}\r\n        <View style={styles.element}>\r\n          <Image source={auron} style={styles.token} />\r\n        </View>\r\n        {[...Array(1)].map((element) => (\r\n          <View style={styles.element} key={element}></View>\r\n        ))}\r\n        <View style={styles.element}>\r\n          <Image source={lexa} style={styles.token} />\r\n        </View>\r\n        {[...Array(3)].map((element) => (\r\n          <View style={styles.element} key={element}></View>\r\n        ))}\r\n        <View style={styles.element}>\r\n          <Image source={steven} style={styles.token} />\r\n        </View>\r\n        {[...Array(52)].map((element) => (\r\n          <View style={styles.element} key={element}></View>\r\n        ))}\r\n      </View>\r\n    </ScrollView>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  scrollContainerVertical: {\r\n    marginTop: 40,\r\n    flex: 1,\r\n    height: 1000,\r\n  },\r\n  container: {\r\n    flex: 1,\r\n    flexDirection: \"row\",\r\n    flexWrap: \"wrap\",\r\n  },\r\n  element: {\r\n    width: Dimensions.get(\"window\").width / 5,\r\n    borderWidth: 1,\r\n    borderColor: \"black\",\r\n    borderStyle: \"dotted\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    height: 75,\r\n    backgroundColor: \"transparent\",\r\n  },\r\n  //If I don't specify the width and height here, this won't work properly. Seems like basically, the width and height are the container limits within which to contain the image.\r\n  token: {\r\n    resizeMode: \"contain\",\r\n    width: 75,\r\n    height: 75,\r\n  },\r\n});\r\n\r\nexport default Board;\r\n"]},"metadata":{},"sourceType":"module"}