{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useContext, useState, useEffect } from \"react\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport KeyboardAvoidingView from \"react-native-web/dist/exports/KeyboardAvoidingView\";\nimport { SocketContext } from \"./contexts/socket\";\n\nvar Chat = function Chat() {\n  var socket = useContext(SocketContext);\n\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      chatMessage = _useState2[0],\n      setChatMessage = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      chatMessages = _useState4[0],\n      setChatMessages = _useState4[1];\n\n  var _useState5 = useState(\"\"),\n      _useState6 = _slicedToArray(_useState5, 2),\n      userName = _useState6[0],\n      setUserName = _useState6[1];\n\n  var _useState7 = useState(\"\"),\n      _useState8 = _slicedToArray(_useState7, 2),\n      otherName = _useState8[0],\n      setOtherName = _useState8[1];\n\n  useEffect(function () {\n    socket.on(\"chat message\", function (msg) {\n      console.log(msg.text);\n      console.log(chatMessages);\n      setChatMessages([].concat(_toConsumableArray(chatMessages), [msg]));\n      setOtherName(msg.sender);\n    });\n    socket.on(\"name\", function (name) {\n      console.log(\"NAME VARIABLE: \", name);\n      setUserName(name.name);\n    });\n  }, [setChatMessages, setUserName]);\n\n  var submitChatMessage = function submitChatMessage() {\n    var msg = {\n      text: chatMessage,\n      sender: userName,\n      type: \"chat\"\n    };\n    socket.emit(\"chat message\", msg);\n    setChatMessage(\"\");\n  };\n\n  var chatMessagesMap = chatMessages.map(function (message) {\n    return React.createElement(Text, {\n      style: message.sender === userName ? styles.ownText : styles.text,\n      key: message.sender + message.text\n    }, message.sender !== userName ? otherName + \": \" : null, message.text);\n  });\n  return React.createElement(KeyboardAvoidingView, {\n    style: styles.view,\n    behavior: \"padding\"\n  }, chatMessagesMap, React.createElement(TextInput, {\n    style: styles.textInput,\n    autoCorrect: false,\n    value: chatMessage,\n    onChangeText: function onChangeText(enteredMessage) {\n      setChatMessage(enteredMessage);\n    },\n    onSubmitEditing: function onSubmitEditing() {\n      submitChatMessage();\n    }\n  }));\n};\n\nvar styles = StyleSheet.create({\n  ownText: {\n    backgroundColor: \"lightgreen\",\n    color: \"black\",\n    borderRadius: 20,\n    padding: 8,\n    margin: 3,\n    marginRight: 20,\n    alignSelf: \"flex-end\"\n  },\n  text: {\n    backgroundColor: \"lightblue\",\n    color: \"black\",\n    borderRadius: 20,\n    padding: 8,\n    margin: 3,\n    marginLeft: 20,\n    alignSelf: \"flex-start\"\n  },\n  textInput: {\n    height: 40,\n    width: \"90%\",\n    borderWidth: 1,\n    marginBottom: 40,\n    paddingLeft: 10,\n    backgroundColor: \"#fff\",\n    borderRadius: 20,\n    alignSelf: \"center\"\n  },\n  view: {\n    flex: 1,\n    justifyContent: \"flex-end\"\n  }\n});\nexport default Chat;","map":{"version":3,"sources":["C:/Users/rusty/Documents/Coding/Fullstack Academy/Senior-Phase/Mobile-VTT/mobile/components/Chat.js"],"names":["React","useContext","useState","useEffect","SocketContext","Chat","socket","chatMessage","setChatMessage","chatMessages","setChatMessages","userName","setUserName","otherName","setOtherName","on","msg","console","log","text","sender","name","submitChatMessage","type","emit","chatMessagesMap","map","message","styles","ownText","view","textInput","enteredMessage","StyleSheet","create","backgroundColor","color","borderRadius","padding","margin","marginRight","alignSelf","marginLeft","height","width","borderWidth","marginBottom","paddingLeft","flex","justifyContent"],"mappings":"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","sourcesContent":["import React, { useContext, useState, useEffect } from \"react\";\r\nimport {\r\n  TextInput,\r\n  Text,\r\n  StyleSheet,\r\n  KeyboardAvoidingView,\r\n} from \"react-native\";\r\n\r\nimport { SocketContext } from \"./contexts/socket\";\r\n\r\nconst Chat = () => {\r\n  //Here is where we use the socket context we defined in the socket context component and started in App.js\r\n  const socket = useContext(SocketContext);\r\n\r\n  //chatMessage deals with the message currently being typed, while chatMessages is a list of all of the messages that have been entered.\r\n  const [chatMessage, setChatMessage] = useState(\"\");\r\n  const [chatMessages, setChatMessages] = useState([]);\r\n  const [userName, setUserName] = useState(\"\");\r\n  const [otherName, setOtherName] = useState(\"\");\r\n\r\n  //This block completes the socket connection between the backend server (backend/index.js) and the client (mobile/App.js).\r\n  //These are also my listeners for server emissions to update chat.\r\n  useEffect(() => {\r\n    socket.on(\"chat message\", (msg) => {\r\n      console.log(msg.text);\r\n      console.log(chatMessages);\r\n      setChatMessages([...chatMessages, msg]);\r\n      setOtherName(msg.sender);\r\n    });\r\n    socket.on(\"name\", (name) => {\r\n      console.log(\"NAME VARIABLE: \", name);\r\n      setUserName(name.name);\r\n    });\r\n  }, [setChatMessages, setUserName]);\r\n\r\n  //Here, we're telling the socket to emit something called \"chat message\" to the server with the chatMessage from state attached. Then, we clear chatMessage.\r\n  const submitChatMessage = () => {\r\n    const msg = {\r\n      text: chatMessage,\r\n      sender: userName,\r\n      type: \"chat\",\r\n    };\r\n    socket.emit(\"chat message\", msg);\r\n    setChatMessage(\"\");\r\n  };\r\n\r\n  //This block is Defining how the chat displays. If the sender matches the sender of the message, it displays differently.\r\n  const chatMessagesMap = chatMessages.map((message) => (\r\n    <Text\r\n      style={message.sender === userName ? styles.ownText : styles.text}\r\n      key={message.sender + message.text}\r\n    >\r\n      {message.sender !== userName ? otherName + \": \" : null}\r\n      {message.text}\r\n    </Text>\r\n  ));\r\n\r\n  //This block is just what's actually being output on screen.\r\n  return (\r\n    <KeyboardAvoidingView style={styles.view} behavior=\"padding\">\r\n      {chatMessagesMap}\r\n      <TextInput\r\n        style={styles.textInput}\r\n        autoCorrect={false}\r\n        value={chatMessage}\r\n        onChangeText={(enteredMessage) => {\r\n          setChatMessage(enteredMessage);\r\n        }}\r\n        onSubmitEditing={() => {\r\n          submitChatMessage();\r\n        }}\r\n      />\r\n    </KeyboardAvoidingView>\r\n  );\r\n};\r\n\r\n//This is our CSS for the component, essentially, even though React-Native doesn't use CSS per se.\r\nconst styles = StyleSheet.create({\r\n  ownText: {\r\n    backgroundColor: \"lightgreen\",\r\n    color: \"black\",\r\n    borderRadius: 20,\r\n    padding: 8,\r\n    margin: 3,\r\n    marginRight: 20,\r\n    alignSelf: \"flex-end\",\r\n  },\r\n  text: {\r\n    backgroundColor: \"lightblue\",\r\n    color: \"black\",\r\n    borderRadius: 20,\r\n    padding: 8,\r\n    margin: 3,\r\n    marginLeft: 20,\r\n    alignSelf: \"flex-start\",\r\n  },\r\n  textInput: {\r\n    height: 40,\r\n    width: \"90%\",\r\n    borderWidth: 1,\r\n    marginBottom: 40,\r\n    paddingLeft: 10,\r\n    backgroundColor: \"#fff\",\r\n    borderRadius: 20,\r\n    alignSelf: \"center\",\r\n  },\r\n  view: {\r\n    flex: 1,\r\n    justifyContent: \"flex-end\",\r\n  },\r\n});\r\n\r\nexport default Chat;\r\n"]},"metadata":{},"sourceType":"module"}